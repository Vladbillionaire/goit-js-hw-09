import { Notify } from 'notiflix/build/notiflix-notify-aio';

// –∑–∞–±–∏—Ä–∞—é –µ–ª–µ–º–µ–Ω—Ç–∏ —Ñ–æ—Ä–º–∏
const formEl = document.querySelector('.form');

// —Å–ª—É—Ö–∞—á –ø–æ–¥—ñ–π –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º–∏
formEl.addEventListener('submit', onSubmitBtn);

//—Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–±–∏—Ä–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —ñ–Ω–ø—É—Ç—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö
function onSubmitBtn(evt) {
  evt.preventDefault();

  const { delay, step, amount } = evt.currentTarget.elements;

  if (delay.value <= 0 || step.value <= 0 || amount.value <= 0) {
    Notify.failure(`üò° Please enter a number greater than 0`);
    evt.target.reset();
  }

  let delayTimeInput = Number(delay.value);
  let stepTimeInput = Number(step.value);

  //–≤–∏–∫–ª–∏–∫–∞—é —Ñ—É–Ω–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º—ñ—Å—ñ–≤ amount-—Ä–∞–∑—ñ–≤
  for (let i = 1; i <= Number(amount.value); i += 1) {
    if (i !== 1) {
      delayTimeInput += stepTimeInput;
    }

    createPromise(i, delayTimeInput)
      .then(({ position, delay }) => {
        Notify.success(`‚úÖ Fulfilled promise ${position} in ${delay}ms`);
      })
      .catch(({ position, delay }) => {
        Notify.failure(`‚ùå Rejected promise ${position} in ${delay}ms`);
      });
  }
}

function createPromise(position, delay) {
  return new Promise((resolve, reject) => {
    const shouldResolve = Math.random() > 0.3;
    setTimeout(() => {
      if (shouldResolve) {
        resolve({ position, delay });
      } else {
        reject({ position, delay });
      }
    }, delay);
  });
}
